/*
 *  Project: Glowa, IAWG 2002-2003,
 *  $Id: FormatedFilePrinterWS.java,v 1.3 2003/05/26 10:26:10 georg Exp $
 */

package org.glowa.danube.components.actor.tourism.utilities;

import java.io.*;
import java.text.*;
import java.util.*;

/**
 * Print to a ASCII-File.<p>
 * This class provides functions to print integer, float,
 * double values in a special format: the field width and precision
 * width may be specified. <br>
 * All files created by the FormatedFilePrinter will be placed in a common
 * output directory "./modelout/text/rivernetwork". Therefore the filename may
 * not have a absolut path since the file is located relative to the common
 * output directory. The existens of the output directory is guaranteed by a
 * static constructor.<p>
 * The FormatedFilePrinter extends the java.io.PrintWriter.
 * <p>
 * All Exceptions generated by the PrintWriter are forwarded
 * by the FormatedFilePrinter.
 * <p>
 *
 *
 * @version 1.0  16.09.2002
 * @author Georg Kasper; see also  <a href="http://www.iawg.de">http://www.iawg.de</a>
 */



public class FormatedFilePrinterWS extends PrintWriter
{
    static public final String OutputDir;
    /**
     * ensure that the output directory for rivernetwork text's exists.
     * set the static member variable OutputDir to the rivernetwork
     * output directory.
     */
    static
    {
        //OutputDir = "modelout" + File.separator + "text"
          //          + File.separator + "rivernetwork";

        OutputDir = "";

        File f = new File( OutputDir );
        if( ! f.exists() )
            f.mkdirs();
    }

    /**
     * create a new FormatedFilePrinter, which is conected to the file "file".
     * The file is placed is the common output directory.
     */
    
    public FormatedFilePrinterWS( String file ) throws java.io.IOException
    {
        //super( new BufferedWriter(
          //           new FileWriter( OutputDir + File.separator + file), 8*1024 ));
        super( new BufferedWriter(
                     new FileWriter(file), 8*1024 ));

        //FileName = OutputDir + File.separator + file;
        FileName = file;

        nf = DecimalFormat.getInstance( new Locale ("ENGLISH","US").ENGLISH );
    }

    /**
     * get the path and the file name used by this FormatedFilePrinter
     * relative to the working directory (execution directory).
     */
    public String   getFilename()
    {
        return FileName;
    }

    /**
     * print a double with a trailing space.
     */
    public void printsp( double d )
    {
        super.print( Double.toString( d ) + " " );
    }

    /**
    * print a float with a trailing space.
    */
    public void printsp( float f )
    {
        super.print( Float.toString( f ) + " " );
    }

    /**
     * print a integer with a trailing space.
     */
    public void printsp( int i )
    {
        super.print( Integer.toString( i ) + " " );
    }

    /**
     * print a formated double followed by a newline.
     * 
     */
    public void println( double d, int ganz, int rest )
    {
        this.print( d, ganz, rest );
        super.println();
    }

    /**
     * print the integer value "val" in a number field with a total length of
     * "length" chars and add a trailing newline.<br>
     * If "length" is negative the number will be padded with blanks for the
     * right side, else form the left.
     */
    public void println( int val, int length )
    {
        this.print( val, length );
        super.println();
    }


    /**
     * print the double value "d" in a number field with a total length of
     * "fieldLeng" chars and a fraction part with the length of "rest" chars.<br>
     * If "fieldLeng" is negative the number will be padded with blanks for the
     * right side, else form the left.<br>
     * If the total field length is to small the number will be enclosed with the
     * brakets <,>.
     */
    public void print( double d, int fieldLeng, int rest )
    {
        int absfieldLeng = fieldLeng >= 0 ? fieldLeng : - fieldLeng;

        nf.setMaximumIntegerDigits( absfieldLeng - rest - 1 );
        nf.setMaximumFractionDigits(rest);
        nf.setMinimumFractionDigits(rest);
        nf.setGroupingUsed(false);

        String s = nf.format( d );

        if( s.length() > absfieldLeng )
            s = "<" + s + ">";
        else
        {
            if (fieldLeng < 0)
                for (int i = s.length(); i < absfieldLeng; i++)
                    s = s + " ";
            else
                for (int i = s.length(); i < fieldLeng; i++)
                    s = " " + s;
        }
        super.print( s );
    }


    /**
     * print the integer value "val" in a number field with a total length of
     * "length" chars.<br>
     * If "fieldLeng" is negative the number will be padded with blanks for the
     * right side, else form the left.
     * If the total field length is to small the number will be enclosed with the
     * brakets <,>.
     */
    public void print( int val, int fieldLeng )
    {
        int absfieldLeng = Math.abs( fieldLeng );
        String s = Integer.toString( val );

        if( s.length() > absfieldLeng )
            s = "<" + s + ">";
        else
        {
            if (fieldLeng < 0)
                for (int i = s.length(); i < absfieldLeng; i++)
                    s = s + " ";
            else
                for (int i = s.length(); i < absfieldLeng; i++)
                    s = " " + s;
        }

        super.print( s );
    }


    /**
     * delete the file "filename" relative to the
     * working directory (execution directory).
     */
    public static boolean delete( String filename )
    {
        boolean rv;

        File f = new File( filename );
        rv     = f.delete();
        f      = null;

        return rv;
    }


    /**
     * get the absolute path of the file "filename" relative to the
     * working directory (execution directory).
     */
    public static String getAbsolutePath( String filename )
    {
        return new File(filename).getAbsolutePath();
    }


    //
    // Attributes:
    //

    private String       FileName;
    private NumberFormat nf;

}   // end class FormatedFilePrinter

// eof
